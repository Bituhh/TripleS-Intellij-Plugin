{
  parserClass="uk.org.oliveira.language.parser.TripleSParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TripleS"
  psiImplClassSuffix="Impl"
  psiPackage="uk.org.oliveira.language.psi"
  psiImplPackage="uk.org.oliveira.language.psi.impl"

  elementTypeHolderClass="uk.org.oliveira.language.psi.TripleSTypes"
  elementTypeClass="uk.org.oliveira.language.psi.TripleSElementType"
  tokenTypeClass="uk.org.oliveira.language.psi.TripleSTokenType"
  tokens = [
    space="regexp:\s+"
    comment="regexp://.*"

    IDENTIFIER="regexp:[a-zA-Z_][a-zA-Z0-9_]*"
    NUMBER="regexp:\d+(\.\d+)?"
    STRING="regexp:('([^'\\]|\\.)*')|(\"([^\"\\]|\\.)*\")|(`([^`\\]|\\.)*`)"
  ]
}

program ::= declaration* <<eof>>

declaration ::= statements | var_declaration

// Statements
statements ::= expr_statement | print_statement
expr_statement ::= expression ';'
print_statement ::= 'print' statements ';'


// Declarations
var_declaration ::= 'var' IDENTIFIER ('=' expression)? ';'


expression ::= boolean_logic | primary | (call '.')? IDENTIFIER '=' expression


boolean_logic ::= logic_or
logic_or ::= logic_and ('or' logic_and)*
logic_and ::= equality ('and' equality)*
equality ::= comparison (('==' | '!=') comparison)*
comparison ::= term (('>' | '<' | '>=' | '<=') term)*
term ::= factor (('+' | '-') factor)*
factor ::= unary (('*' | '/') unary)*
unary ::= ('-' | '!') unary | call
call ::= primary ('(' arguments? ')' | '.' IDENTIFIER)*
arguments ::= expression (',' expression)*



primary ::= 'true' | 'false' | 'null' | NUMBER | STRING | IDENTIFIER
